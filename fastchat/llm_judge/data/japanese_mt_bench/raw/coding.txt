--- 問題 1 ---
ディレクトリ内の全てのテキストファイルを読み込み、出現回数が最も多い上位5単語を返すPythonプログラムを開発してください。
--- 追問 1.2 ---
それを並列化（parallelize）することは可能ですか？
--- 問題 2 ---
再帰（recursion）を用いてn番目のフィボナッチ数（Fibonacci number）を求めるC++プログラムを書いてください。
--- 追問 2.2 ---
今度は、各数が前の3つの数の和である数列を考えます。最初の3つの数は0、-1、-1です。n番目の数を求めるプログラムを書いてください。
--- 問題 3 ---
HTMLでシンプルなウェブサイトを作成してください。ユーザーがボタンをクリックすると、4つのジョークからランダムに一つ表示されます。
--- 追問 3.2 ---
CSSを使ってジョークの色を赤にする方法は何ですか？
--- 問題 4 ---
以下に、二つの入力文字列の最長共通部分列（longest common subsequence）の長さを求めるPython関数があります。この関数には何かバグがありますか？

```
def longest_common_subsequence_length(str1, str2):
    m = len(str1)
    n = len(str2)

    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    return dp[m][n]
```
--- 追問 4.2 ---
では、この関数はどうでしょうか？

```
def longest_common_subsequence(X , Y): 
    # Find lengths of two strings 
    m = len(X) 
    n = len(Y) 
  
    # Create a table to store results of sub-problems 
    dp = [[None]*(n+1) for i in range(m+1)] 
  
    # Fill dp[][] in bottom up manner 
    for i in range(1, m+1): 
        for j in range(1, n+1): 
            if X[i-1] == Y[j-1]: 
                dp[i][j] = dp[i-1][j-1]+1
            else: 
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) 
  
    return dp[m][n]
```
--- 問題 5 ---
バイナリツリー（binary tree）の2つのノードの最高の共通祖先（highest common ancestor）を見つける関数を書いてください。
--- 追問 5.2 ---
それが二分木でない場合はどうなりますか？
--- 問題 6 ---
O(1)の空間複雑度（space complexity）とO(n)の時間複雑度（time complexity）で、異なるサイズの2つのソートされた配列の中央値（median）を見つける関数を実装してください。
--- 追問 6.2 ---
より良い時間複雑度を持つ実装は存在しますか？
--- 問題 7 ---
Boyer-Moore投票アルゴリズム（Boyer-Moore Voting Algorithm）を使用して、指定された整数配列の過半数要素（majority element）を見つける関数を書いてください。
--- 追問 7.2 ---
最も多く出現する上位2要素を見つけるにはどうすればいいですか？
--- 問題 8 ---
バイナリツリーがすべての頂点が0個または2個の子を持つ場合、それは完全であると言います。B_nをn個の頂点を持つ完全なバイナリツリーの数とします。B_nを見つける関数を実装してください。
--- 追問 8.2 ---
問題がバイナリツリーから三分木（ternary tree）に変わったらどうなりますか？
--- 問題 9 ---
あなたはサイズmとnの2つのソートリストを与えられます。二つのリストの合計からk番目に小さい要素を見つける関数を線形の複雑度で実装してください。
--- 追問 9.2 ---
より良い時間複雑度を持つアルゴリズムは存在しますか？もしあれば、それを実装してください。
--- 問題 10 ---
追加のデータ構造を使わずに、二つの配列の共通要素を見つけるプログラムを実装してください。
--- 追問 10.2 ---
今度は、追加のデータ構造の使用制限がなくなりました。最良の時間複雑度を持つ実装を行ってください。